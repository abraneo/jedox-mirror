/* 
 *
 * Copyright (C) 2006-2014 Jedox AG
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License (Version 2) as published
 * by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * If you are developing and distributing open source applications under the
 * GPL License, then you are free to use Palo under the GPL License.  For OEMs,
 * ISVs, and VARs who distribute Palo with their products, and do not license
 * and distribute their source code under the GPL, Jedox provides a flexible
 * OEM Commercial License.
 *
 * \author Frank Celler, triagens GmbH, Cologne, Germany
 * \author Achim Brandt, triagens GmbH, Cologne, Germany
 * \author Jiri Junek, qBicon s.r.o., Prague, Czech Republic
 * \author Martin Jakl, qBicon s.r.o., Prague, Czech Republic
 * 
 *
 */

#ifndef INPUT_OUTPUT_FILE_WRITER_TXT_H
#define INPUT_OUTPUT_FILE_WRITER_TXT_H 1

#include "palo.h"

#include "InputOutput/FileWriter.h"

namespace palo {

////////////////////////////////////////////////////////////////////////////////
/// @brief file a data writer
///
/// The file write generates CSV files to store the OLAP server, database, dimension
/// and cube data.
////////////////////////////////////////////////////////////////////////////////

class SERVER_CLASS FileWriterTXT : public FileWriter {
public:

	////////////////////////////////////////////////////////////////////////////////
	/// @brief constructs a new file writer object for a given filename, path and file extension
	////////////////////////////////////////////////////////////////////////////////

	FileWriterTXT(const FileName& fileName);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief deletes a file writer object
	////////////////////////////////////////////////////////////////////////////////

	virtual ~FileWriterTXT();

public:

	////////////////////////////////////////////////////////////////////////////////
	/// @brief opens the file for writing
	////////////////////////////////////////////////////////////////////////////////

	virtual void openFile(bool append = false);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief close the file for writing
	////////////////////////////////////////////////////////////////////////////////

	virtual void closeFile();

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends a comment line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendComment(const string& value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends a section line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendSection(const string& value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends a string to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendString(const string& value, char terminator = ';');

	////////////////////////////////////////////////////////////////////////////////
	/// @brief escapes a string and appends the result to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendEscapeString(const string& value, char terminator = ';');

	////////////////////////////////////////////////////////////////////////////////
	/// @brief escapes a list of strings and appends the result to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendEscapeStrings(const vector<string>* value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends an integer to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendInteger(const int32_t value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends list of integers to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendIntegers(const vector<int32_t>* value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends an identifier to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendIdentifier(const IdentifierType value, char terminator = ';');

	virtual void appendSet(const Set &value);
	virtual void appendAreaCompact(CPArea value, CPArea parent);
	virtual void appendPlan(CPPlanNode, CPArea parentArea=CPArea());
	virtual void appendAggregationMaps(CPAggregationMaps aggrMaps);

	virtual void appendArea(CPArea value);
	virtual void appendArea(vector<IdentifiersType> &value, bool emptyAll);
	virtual void appendPaths(CPPaths value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends a double to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendDouble(const double value, char terminator = ';');

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends list of doubles to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendDoubles(const vector<double>* value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends a boolean to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendBool(const bool value);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief appends a timestamp to the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void appendTimeStamp();
	virtual void appendTimeStamp(timeval &tv);

	////////////////////////////////////////////////////////////////////////////////
	/// @brief finalize the actual line
	////////////////////////////////////////////////////////////////////////////////

	virtual void nextLine();

	virtual void appendRaw(const string& value);

	virtual void appendRaw(const char *p, streamsize size);

private:

	////////////////////////////////////////////////////////////////////////////////
	/// @brief escape a string and return the escaped string
	////////////////////////////////////////////////////////////////////////////////

	string escapeString(const string& text);

protected:
	virtual void appendArray(bool bFirst, IdentifierType value, char separator);
	virtual void appendArrayFinish(char terminator);
	virtual bool isFirstValue();
	virtual void setFirstValue(bool);
	void writeBuffer();

	////////////////////////////////////////////////////////////////////////////////
	/// @brief the output stream
	////////////////////////////////////////////////////////////////////////////////

	ostream* outputFile;

private:

	////////////////////////////////////////////////////////////////////////////////
	/// @brief true if the buffer should be flushed after a new line
	////////////////////////////////////////////////////////////////////////////////

	bool isFirst;
};

}

#endif
