/* 
 *
 * Copyright (C) 2006-2014 Jedox AG
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License (Version 2) as published
 * by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * If you are developing and distributing open source applications under the
 * GPL License, then you are free to use Palo under the GPL License.  For OEMs,
 * ISVs, and VARs who distribute Palo with their products, and do not license
 * and distribute their source code under the GPL, Jedox provides a flexible
 * OEM Commercial License.
 *
 * \author Frank Celler, triagens GmbH, Cologne, Germany
 * \author Achim Brandt, triagens GmbH, Cologne, Germany
 * \author Zurab Khadikov, Jedox AG, Freiburg, Germany
 * \author Martin Jakl, qBicon s.r.o., Prague, Czech Republic
 * 
 *
 */

#ifndef SYSTEM_SYSTEM_H
#define SYSTEM_SYSTEM_H 1

#include <math.h>

////////////////////////////////////////////////////////////////////////////////
/// @brief disable warnings about sprintf and strcat
////////////////////////////////////////////////////////////////////////////////

#define _CRT_SECURE_NO_DEPRECATE 1

#pragma warning(disable : 4996)

////////////////////////////////////////////////////////////////////////////////
/// include socket layer
////////////////////////////////////////////////////////////////////////////////

#define _WIN32_WINNT 0x0400

#include <Winsock2.h>
#include <Ws2tcpip.h>
#include <direct.h>
#include <io.h>
#include <sys/types.h>
#include <sys/stat.h>

////////////////////////////////////////////////////////////////////////////////
/// @brief enable GpuJob timing
////////////////////////////////////////////////////////////////////////////////

//#define ENABLE_GPU_JOB_TIMING 1

////////////////////////////////////////////////////////////////////////////////
/// @brief enable HTTPS interface
////////////////////////////////////////////////////////////////////////////////

//#define ENABLE_HTTPS 1

/* enable this flag in the project */
/* #define ENABLE_HTTPS_MODULE 1 */

////////////////////////////////////////////////////////////////////////////////
/// @brief enable time profiler
////////////////////////////////////////////////////////////////////////////////

/* #define ENABLE_TIME_PROFILER 1 */

////////////////////////////////////////////////////////////////////////////////
/// @brief can overload size_t and long
////////////////////////////////////////////////////////////////////////////////

/* #define OVERLOAD_FUNCS_SIZE_T_LONG */

////////////////////////////////////////////////////////////////////////////////
/// @brief alignment of double
////////////////////////////////////////////////////////////////////////////////

#define ALIGNOF_DOUBLE 4

////////////////////////////////////////////////////////////////////////////////
/// @brief unsigned integer types
////////////////////////////////////////////////////////////////////////////////

typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char uint8_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief integer types
////////////////////////////////////////////////////////////////////////////////

typedef long long int64_t;
typedef int int32_t;
typedef short int16_t;
typedef signed char int8_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief seconds in timeval
////////////////////////////////////////////////////////////////////////////////

typedef long suseconds_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief signed size
////////////////////////////////////////////////////////////////////////////////

typedef long ssize_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief socket
////////////////////////////////////////////////////////////////////////////////

typedef SOCKET socket_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief socket structure length
////////////////////////////////////////////////////////////////////////////////

typedef int socklen_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief signal
////////////////////////////////////////////////////////////////////////////////

typedef int signal_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief operation would block
////////////////////////////////////////////////////////////////////////////////

#define EWOULDBLOCK_SOCKET WSAEWOULDBLOCK

////////////////////////////////////////////////////////////////////////////////
/// @brief operation interrupted
////////////////////////////////////////////////////////////////////////////////

#define EINTR_SOCKET WSAEINTR
#define ECONNRESET_SOCKET WSAECONNRESET

////////////////////////////////////////////////////////////////////////////////
/// @brief error number
////////////////////////////////////////////////////////////////////////////////

#define errno_socket WSAGetLastError()

////////////////////////////////////////////////////////////////////////////////
/// @brief string of error message
////////////////////////////////////////////////////////////////////////////////

inline const char* strerror_socket(int error)
{
	static char buffer[1024];

	FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_MAX_WIDTH_MASK, 0, error, MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), (LPSTR)buffer, sizeof(buffer), 0);

	buffer[sizeof(buffer) - 1] = '\0';

	return buffer;
}

#define windows_error strerror_socket

////////////////////////////////////////////////////////////////////////////////
/// @brief sets non-block mode for a socket
////////////////////////////////////////////////////////////////////////////////

inline bool SetNonBlockingSocket(socket_t fd)
{
	DWORD ul = 1;

	return ioctlsocket(fd, FIONBIO, &ul) == SOCKET_ERROR ? false : true;
}

////////////////////////////////////////////////////////////////////////////////
/// @brief gets time of day in milliseconds
////////////////////////////////////////////////////////////////////////////////

inline int gettimeofday(struct timeval* tv, void* tz)
{
	union {
		int64_t ns100; // since 1.1.1601 in 100ns units
		FILETIME ft;
	} now;

	GetSystemTimeAsFileTime(&now.ft);

	tv->tv_usec = (long)((now.ns100 / 10LL) % 1000000LL);
	tv->tv_sec = (long)((now.ns100 - 116444736000000000LL) / 10000000LL);

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
/// @brief formatted string print
////////////////////////////////////////////////////////////////////////////////

#define snprintf _snprintf

////////////////////////////////////////////////////////////////////////////////
/// @brief change directory
////////////////////////////////////////////////////////////////////////////////

#define chdir _chdir

////////////////////////////////////////////////////////////////////////////////
/// @brief current directory
////////////////////////////////////////////////////////////////////////////////

#define getcwd _getcwd

////////////////////////////////////////////////////////////////////////////////
/// @brief create directory
////////////////////////////////////////////////////////////////////////////////

#define mkdir _mkdir

////////////////////////////////////////////////////////////////////////////////
/// @brief delete directory
////////////////////////////////////////////////////////////////////////////////

#define rmdir _rmdir

////////////////////////////////////////////////////////////////////////////////
/// @brief file statistics
////////////////////////////////////////////////////////////////////////////////

#define stat _stat

////////////////////////////////////////////////////////////////////////////////
/// @brief not a number
////////////////////////////////////////////////////////////////////////////////

#define isnanLocal _isnan

////////////////////////////////////////////////////////////////////////////////
/// @brief usleep
////////////////////////////////////////////////////////////////////////////////

#define usleep(v) Sleep(v/1000)

////////////////////////////////////////////////////////////////////////////////
/// @brief PI
////////////////////////////////////////////////////////////////////////////////

#define M_PI 3.14159265358979323846

////////////////////////////////////////////////////////////////////////////////
/// @brief thread-local keyword for MSVC
////////////////////////////////////////////////////////////////////////////////

#define __thread __declspec(thread)

////////////////////////////////////////////////////////////////////////////////
/// @brief noinline keyword for MSVC
////////////////////////////////////////////////////////////////////////////////
#define __noinline __declspec(noinline)

////////////////////////////////////////////////////////////////////////////////
/// @brief deprecated keyword for MSVC
////////////////////////////////////////////////////////////////////////////////
#define __deprecated __declspec(deprecated)
#define __deprecated_msg(msg) __declspec(deprecated(msg))

// round and trunc has conflicts with cuda api (Z.K.)

#ifndef __CUDACC__
////////////////////////////////////////////////////////////////////////////////
/// @brief round, away from zero
////////////////////////////////////////////////////////////////////////////////

inline double round(double d)
{
	if (d >= 0.0) {
		return floor(d + 0.5);
	} else {
		return -floor(-d + 0.5);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// @brief round, towards zero
////////////////////////////////////////////////////////////////////////////////

inline double trunc(double d)
{
	if (d >= 0.0) {
		return floor(d);
	} else {
		return ceil(d);
	}
}
#endif //__CUDACC__

////////////////////////////////////////////////////////////////////////////////
/// @brief DLL exports
////////////////////////////////////////////////////////////////////////////////

#pragma warning(disable : 4251)

#if defined(EXPORTING_SERVER)
#   define SERVER_CLASS __declspec(dllexport)
#   define SERVER_FUNC __declspec(dllexport)
#elif defined(IMPORTING_SERVER)
#   define SERVER_CLASS __declspec(dllimport)
#   define SERVER_FUNC __declspec(dllimport)
#else
#   define SERVER_CLASS /* static build */
#   define SERVER_FUNC /* static build */
#endif

#ifdef ENABLE_HTTPS
#   if defined(EXPORTING_HTTPS)
#       define HTTPS_CLASS __declspec(dllexport)
#       define HTTPS_FUNC __declspec(dllexport)
#   elif defined(IMPORTING_HTTPS)
#       define HTTPS_CLASS __declspec(dllimport)
#       define HTTPS_FUNC __declspec(dllimport)
#   else
#       define HTTPS_CLASS /* static build */
#       define HTTPS_FUNC /* static build */
#   endif
#endif

#ifdef EXPORTING_LIC
#       define LIC_CLASS __declspec(dllexport)
#       define LIC_FUNC __declspec(dllexport)
#endif

#endif
